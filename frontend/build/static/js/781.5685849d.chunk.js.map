{"version":3,"file":"static/js/781.5685849d.chunk.js","mappings":"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","sources":["components/Task/TaskForm.js","components/Task/TaskItem.js","components/Task/TaskDashboard.js","pages/TaskPage.js"],"sourcesContent":["import React, { useState, useContext } from 'react';\nimport { TaskContext } from '../../context/TaskContext';\n\nconst TaskForm = ({ existingTask, closeForm }) => {\n  const { createTask, updateTask } = useContext(TaskContext);\n  const [task, setTask] = useState(\n    existingTask || { title: '', description: '', status: 'Pending', priority: 'Medium', due_date: '' }\n  );\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (existingTask) {\n      updateTask(existingTask.id, task);\n    } else {\n      createTask(task);\n    }\n    closeForm && closeForm();\n  };\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n      className=\"bg-white p-4 shadow-lg rounded-md border border-gray-200\"\n    >\n      <div className=\"mb-4\">\n        <label className=\"block text-sm font-medium text-gray-700\">Title</label>\n        <input\n          type=\"text\"\n          value={task.title}\n          onChange={(e) => setTask({ ...task, title: e.target.value })}\n          required\n          className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\n        />\n      </div>\n      <div className=\"mb-4\">\n        <label className=\"block text-sm font-medium text-gray-700\">Description</label>\n        <textarea\n          value={task.description}\n          onChange={(e) => setTask({ ...task, description: e.target.value })}\n          className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\n        ></textarea>\n      </div>\n      <div className=\"mb-4\">\n        <label className=\"block text-sm font-medium text-gray-700\">Priority</label>\n        <select\n          value={task.priority}\n          onChange={(e) => setTask({ ...task, priority: e.target.value })}\n          className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\n        >\n          <option value=\"Low\">Low</option>\n          <option value=\"Medium\">Medium</option>\n          <option value=\"High\">High</option>\n        </select>\n      </div>\n      <div className=\"mb-4\">\n        <label className=\"block text-sm font-medium text-gray-700\">Due Date</label>\n        <input\n          type=\"date\"\n          value={task.due_date}\n          onChange={(e) => setTask({ ...task, due_date: e.target.value })}\n          className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\n        />\n      </div>\n      <div className=\"flex justify-end\">\n        <button\n          type=\"submit\"\n          className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded shadow-md\"\n        >\n          {existingTask ? 'Update Task' : 'Add Task'}\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default TaskForm;\n","import React, { useContext, useState } from 'react';\nimport { TaskContext } from '../../context/TaskContext';\nimport TaskForm from './TaskForm';\n\nconst TaskItem = ({ task }) => {\n  const { deleteTask, updateTask } = useContext(TaskContext);\n  const [isEditing, setIsEditing] = useState(false);\n\n  const toggleStatus = () => {\n    updateTask(task.id, { status: task.status === 'Pending' ? 'Done' : 'Pending' });\n  };\n\n  const handleEdit = () => {\n    setIsEditing(true);\n  };\n\n  const handleSave = () => {\n    setIsEditing(false);\n  };\n\n  // Format the due date\n  const formatDueDate = (isoString) => {\n    if (!isoString) return 'No due date';\n    const date = new Date(isoString);\n    return new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    }).format(date);\n  };\n\n  return (\n    <li className=\"bg-white p-4 shadow-lg rounded-md border border-gray-200\">\n      {isEditing ? (\n        <TaskForm existingTask={task} closeForm={handleSave} />\n      ) : (\n        <>\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"font-bold text-lg text-gray-700\">{task.title}</h3>\n            <button\n              onClick={handleEdit}\n              className=\"text-blue-500 hover:text-blue-700\"\n              title=\"Edit Task\"\n            >\n              ✏️\n            </button>\n          </div>\n          <p className=\"text-gray-600\">{task.description}</p>\n          <p className=\"text-sm text-gray-500 mt-2\">\n            Priority: <span className=\"font-medium\">{task.priority}</span>\n          </p>\n          <p className=\"text-sm text-gray-500\">\n            Due: <span className=\"font-medium\">{formatDueDate(task.due_date)}</span>\n          </p>\n          <div className=\"mt-4 flex justify-between items-center\">\n            <button\n              onClick={toggleStatus}\n              className={`px-3 py-1 rounded text-white ${\n                task.status === 'Pending' ? 'bg-yellow-500 hover:bg-yellow-600' : 'bg-green-500 hover:bg-green-600'\n              }`}\n            >\n              Mark as {task.status === 'Pending' ? 'Done' : 'Pending'}\n            </button>\n            <button\n              onClick={() => deleteTask(task.id)}\n              className=\"bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded\"\n            >\n              Delete\n            </button>\n          </div>\n        </>\n      )}\n    </li>\n  );\n};\n\nexport default TaskItem;\n","import React, { useContext, useState } from 'react';\nimport { TaskContext } from '../../context/TaskContext';\nimport TaskItem from './TaskItem';\nimport TaskForm from './TaskForm';\n\nconst TaskDashboard = () => {\n  const { tasks, loading, error } = useContext(TaskContext);\n  const [isAdding, setIsAdding] = useState(false);\n  const [filter, setFilter] = useState({ status: '', priority: '', dueDate: '' });\n  const [sort, setSort] = useState({ criteria: '', direction: 'asc' }); \n\n  // Apply filters\n  const filteredTasks = tasks.filter((task) => {\n    const matchesStatus = !filter.status || task.status === filter.status;\n    const matchesPriority = !filter.priority || task.priority === filter.priority;\n    const matchesDueDate = !filter.dueDate || task.due_date.startsWith(filter.dueDate); \n    return matchesStatus && matchesPriority && matchesDueDate;\n  });\n\n  // Apply sorting\n  const sortedTasks = filteredTasks.sort((a, b) => {\n    const direction = sort.direction === 'asc' ? 1 : -1;\n    if (sort.criteria === 'dueDate') {\n      return direction * (new Date(a.due_date) - new Date(b.due_date));\n    } else if (sort.criteria === 'priority') {\n      const priorityOrder = { High: 1, Medium: 2, Low: 3 };\n      return direction * (priorityOrder[a.priority] - priorityOrder[b.priority]);\n    } else if (sort.criteria === 'status') {\n      return direction * a.status.localeCompare(b.status);\n    }\n    return 0;\n  });\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-4\">\n      <h1 className=\"text-2xl font-bold text-center mb-4\">Task Dashboard</h1>\n\n      {/* \"Add Task\" Button */}\n      <button\n        onClick={() => setIsAdding(!isAdding)}\n        className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded shadow-md\"\n      >\n        {isAdding ? 'Cancel' : 'Add Task'}\n      </button>\n      {isAdding && (\n        <div className=\"mt-4\">\n          <TaskForm closeForm={() => setIsAdding(false)} />\n        </div>\n      )}\n\n      {/* Filter and Sort Controls */}\n      <div className=\"flex flex-wrap justify-between items-center mt-6 gap-4\">\n        {/* Filters */}\n        <div className=\"flex gap-4\">\n          <select\n            value={filter.status}\n            onChange={(e) => setFilter({ ...filter, status: e.target.value })}\n            className=\"border border-gray-300 rounded px-3 py-2\"\n          >\n            <option value=\"\">All Status</option>\n            <option value=\"Done\">Done</option>\n            <option value=\"Pending\">Pending</option>\n          </select>\n          <select\n            value={filter.priority}\n            onChange={(e) => setFilter({ ...filter, priority: e.target.value })}\n            className=\"border border-gray-300 rounded px-3 py-2\"\n          >\n            <option value=\"\">All Priorities</option>\n            <option value=\"High\">High</option>\n            <option value=\"Medium\">Medium</option>\n            <option value=\"Low\">Low</option>\n          </select>\n          <input\n            type=\"date\"\n            value={filter.dueDate}\n            onChange={(e) => setFilter({ ...filter, dueDate: e.target.value })}\n            className=\"border border-gray-300 rounded px-3 py-2\"\n          />\n        </div>\n\n        {/* Sort */}\n        <div className=\"flex items-center gap-4\">\n          <select\n            value={sort.criteria}\n            onChange={(e) => setSort({ ...sort, criteria: e.target.value })}\n            className=\"border border-gray-300 rounded px-3 py-2\"\n          >\n            <option value=\"\">No Sorting</option>\n            <option value=\"dueDate\">Sort by Due Date</option>\n            <option value=\"priority\">Sort by Priority</option>\n            <option value=\"status\">Sort by Status</option>\n          </select>\n          <button\n            onClick={() =>\n              setSort({ ...sort, direction: sort.direction === 'asc' ? 'desc' : 'asc' })\n            }\n            className=\"bg-gray-200 hover:bg-gray-300 px-4 py-2 rounded\"\n          >\n            {sort.direction === 'asc' ? 'Ascending' : 'Descending'}\n          </button>\n        </div>\n      </div>\n\n      {/* Tasks List */}\n      {loading && <p className=\"text-center text-gray-500 mt-4\">Loading tasks...</p>}\n      {error && <p className=\"text-center text-red-500 mt-4\">{error}</p>}\n      <ul className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 mt-6\">\n        {sortedTasks.map((task) => (\n          <TaskItem key={task.id} task={task} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TaskDashboard;\n","import React from 'react';\nimport TaskDashboard from '../components/Task/TaskDashboard';\n\nconst TaskPage = () => {\n  return <TaskDashboard />;\n};\n\nexport default TaskPage;\n"],"names":["_ref","existingTask","closeForm","createTask","updateTask","useContext","TaskContext","task","setTask","useState","title","description","status","priority","due_date","_jsxs","onSubmit","e","preventDefault","id","className","children","_jsx","type","value","onChange","_objectSpread","target","required","deleteTask","isEditing","setIsEditing","TaskForm","handleSave","_Fragment","onClick","handleEdit","isoString","date","Date","Intl","DateTimeFormat","year","month","day","format","formatDueDate","toggleStatus","concat","TaskDashboard","tasks","loading","error","isAdding","setIsAdding","filter","setFilter","dueDate","sort","setSort","criteria","direction","sortedTasks","matchesStatus","matchesPriority","matchesDueDate","startsWith","a","b","priorityOrder","High","Medium","Low","localeCompare","map","TaskItem","TaskPage"],"sourceRoot":""}